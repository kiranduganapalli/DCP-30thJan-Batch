Deployment ::::


	speedup the prod delivery ===> QA *.war.v1.0_SNAPSHOT
	
	-m copy -a "src=webapp.war dest=/opt/tomcat/webapps"	v1.0	
	
	-m copy -a "src=webapp.war dest=/opt/tomcat/webapps"	v1.1
	-m copy -a "src=webapp.war dest=/opt/tomcat/webapps"	v1.2
	-m copy -a "src=webapp.war dest=/opt/tomcat/webapps"	v1.3
	-m copy -a "src=webapp.war dest=/opt/tomcat/webapps"	v1.4
	
	-m copy -a "src=*.war.v1.0_SNAPSHOT dest=/opt/tomcat/webapps backup=yes"
	
	*.war.v1.1_SNAPSHOT
	
	*.war.v1.0_SNAPSHOT_bckup_17-02-23.00.00.00
	
	cp *.war.v1.0_SNAPSHOT *.war.v1.0_SNAPSHOT_bckup_17-02-23
	
	/opt/tomcat/webapps/*.war.v1.0_SNAPSHOT
	
	re-run the deployment job:
	
		fetch the artifacts and copy to QA-server
		


#######
DAY-15
#######

		Docker ::::
		
		Containers ::::
		
		Deployment	
		
		build ===> *.war_v1.0 		==> 	Unit Testing - Build Server
		
											jdk1.8,tomcat8.0
											
					(*.war_v1.0,jdk1.8,tomcat8.0)	--- pkg1/image1	--- Container 
		
		Deployment ::
		
			copy the *.war_v1.0 to QA / UAT / PROD 
			
			copy the pkg1/image1 to QA / UAT / PROD
			
			QA - jdk1.6,tomcat9.0
			UAT - jdk1.8,tomcat8.0
			PROD - jdk1.8,tomcat8.0
			
		Microservice based architecture :::
		
		
		Docker Container Engine ::: 2013 
		
			docker image 
			docker containers 
			
		Virtual Machines ::::
		
		Docker :::
			Development --- Deployment (*.war_v1.0,jdk1.8,tomcat8.0):
			
			Infra-Structure:
			
			Jenkins_Master :			
				Slave1		 build java			pull tomcat image1
				Slave2				.net
				Slave3				python 
				Slave4
				Slave5
				Slave6
				
			Containers!
			
			Jenkin_Master - VM
			
				Slave_Machine	- VM
					Install Docker Container Engine 
							Create any number of containers
					java_app1 - container1
					python_app2 - container2
					
					
							
				executed application		executed application
				Containers1(Linux)			Container2()
				Container Engine
				OS	linux/window
				VM -- computing Device Hardware / 
				
			Container as a OS level Virtualization
			
			Virtual Machine ::: -- Hardware level Virtualization
			
			
			eg.: 
			
			
			Window Machine 
			
			Virtual Machines 		Cloud platform to create VMs(OS,windows,Macc)
			
			Window --> Hypervisor - Oracle Virtual Box --> VMs(OS,windows,Macc) -- 
			
			
			Windows --> Docker container Engine for Windows ==> Container1,2,3,4,5,5,6,,7
				
			EC2 Instance --> Docker container Engine for Linux ==> Container1,2,3,4,5,5,6,,7

			EC2 Instance Windows == > Hypervisor - Oracle Virtual Box --> VMs(OS,windows,Macc) -- 
			
			On-premise ::: Hypervisor - Oracle Virtual Box --> VMs(OS,windows,Macc) -- 
			
		E_Commerce Portal :::
		
			dev,build,deployment 
		
			On-premise ::: Hypervisor - Oracle Virtual Box --> VMs(OS,windows,Macc) -- 
				Using Containers --> reduce the no. of VMs in Local
	
		Terminologies :
		
			Docker Engine 
			Docker Image
				Docker Registry is to store all the docker images
				dockerhub.com
				
			Docker Containers 
		
		Installation of Docker Engine :::
		
		Cloud : 
		AWS - ECS , ECR -- EKS
		Az - AzCS, AzCR	- AKS
		
		Docker Architecture ::
				
				Docker Engine, Docker Registry(dockerhub)
				Docker CLI 
		Demo :
		
			Launch EC2 Instance :::
				Install Docker Engine 
					Start Docker Engine
				pull
				
			
		Docker used microservice based archi.

			10000000 containers ::
				high availablility of containers!!!
				
				sign-in		- *.war -- deployed 
				
				Container Orchestration Tool :
				
				create a replica of the images and containers 				
				load balancing
				auto-scaling 
				
					Docker Swarm -- just for Docker !!!
					
				Container Orchestration Tool :	Kubernetes!
					
					Docker swarm (vs) Kubernetes
					
					
		Demo :
		
			EC2 Instance --> Docker container Engine for Linux ==> Container1,2,3,4,5,5,6,,7
			
		docker --version
		docker images 
		docker ps 
		
		docker pull ==> it is used to download the image from docker registry 
		
		docker run ===> used to run the container 
		
		docker ps == get the list of containers 
		
		images === is the package
		
		container == is the executable of the image.
		
		docker ps ===> is used to list the running containers 
		
		docker ps -a ==> s used to list the stopped/exited containers 
		
		docker run :::
		
		Interactive Mode --
	
	
	Docker Container Executions!!!
	
		Interactive Mode 
		
		Detached Mode 
		
		Attached Mode 
		
	Tomcat : 8080
	
	run we appln. 
	
	docker run -it tomcat:8.0 bash
	
	
	Docker Image Creation
	
		Docker Build -- 
		
		Docker commit 
		
	created image :
	pushed to docker registry!
	
	Containers Volume!!!
	
	Container -- Appln. web appln. - output 
	
	Stateful 
	Stateless 
	
	Docker Compose 
		run multiple containers 
		
	Config file ::
		container defi...
			centos
			tomcat
			mysql
	Docker Swarm
	
	Container Orchestration Tool :::
	
	Kubernetes ::::
	
		Open-Source tool to manage containers!
		
		ensure high Availability 
		loadbalancing!
		
	Docker Image -- web_appln. -- docker hub 
	
	PROD Server :
	
		Kubernetes Cluster!

	Kubernetes Architecture
	
	
Kubernetes Master :  -- just to schedule and manage the containers
	Cluster :
		Kubernetes WorkerNode1 c1
		Kubernetes WorkerNode2 c1
		Kubernetes WorkerNode3 c1
	
Terminologies :::
	Cluster 
	Container --> POD
	Images 
	Namespaces 
	Deployments
	Replicas
	Volumes 
	
#######
DAY 17
#######
		Kubernetes Objects :::
		
		Install Kubernetes 
			AWS, Az, GCP ---> 
		Kubernetes -- Open-Source
			kubeadm 
			minikube ===
		pods 
		Controllers 
		Deployment Controller 
		Replicasets 
		Volumes
	
	
	
	Manifest file -- App Config file -- written in yaml/json -- pod1.yaml 
	
	kubectl create -f pod1.yaml 
	
	Kubernetes Services :::
	
		ClusterIP Services	---  Default service 
		NodePort Services    --- Used to expose the pod to internet 
		LoadBalancer Service 
		
	Kubernetes Objects ::::
	
	Replication Controllers 
	Replicasets
	Deployment Controllers
		Used for auto-scaling, upgrade/rollback.

NEXT :::

	Daemonsets 
	Services 
	Volumes 
	
	HELM 	
	
	Labels & Selectors !!!!
	
	
	
