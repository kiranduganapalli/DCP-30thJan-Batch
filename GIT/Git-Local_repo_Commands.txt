
To setup Global Config:
git config --global user.email "xxxxx@gmail.com"
git config --global user.name "yyyyyyyy"

To setup Local Config:

git init 
git config user.email "xxxxx@gmail.com"
git config user.name "yyyyyyy"


scenario 1: Create Empty Local repository & add some files, modify files then add to git staging area & commit all changes together

	mkdir ProjectA ; cd ProjectA
	git init ( will initialize the empty project if the directory is empty )
	touch abc.java new.java sample.java ( creates empty files if not exists )
	vi sample.java (opens the file in editor - enter some text & save it )
	git status -- to check changes made
	git add abc.java new.java sample.java ( adds the files to git staging area so that git can track the changes )
	git commit -m "any message" ( saves the files to git repository permanently  & genereates a commit id )

===================================================================================================================	
scenario 2: in a git local repository add more files, edit some files, remove somefiles & add to staging area then commit the changes for every change accordingly 

	cd ProjectA ( switch into the project direcotry in which git init command was ran )
	touch heloworld.java readme.txt ( creates new empty files )
	git status -- to check changes made
	git add . ( we can give the individual file names OR just give dot (.) to stage all the changes in the project )
	git commit -m "added files"
	vi heloworld.java ( opens the file in editor - enter some text & save it )
	git status -- to check changes made
	git add .
	git commit -m "modified heloworld.java"
	rm abc.java ( removes the files from project ProjectA direcotry )
	git status -- to check changes made
	git add .
	git commit -m "deleted abc.java"

	Note: like above you can add & commit each change you do OR you do all changes in a repository then at the end you can add & commit them all together also, its completely how you want to do it.

===================================================================================================================
scenario 3: check all the commits made so far & who commited at what time etc...
	
	cd ProjectA
	git log ( will show all the commits made to project so far )
	git log --oneline ( will show all the commits in short form )

git log command Options:

git log
git log --oneline
git log --stat
git log -3
git log --oneline -3

===================================================================================================================	
scenario 4: ignoring some files in a git repository permanently ( .gitignore )

	cd ProjectA
	touch .gitignore ( creates a .gitignore file ) 
	vi .gitignore ( opens the file for editing enter below )
		logs/   ( completely ignore the direcotry & content inside )
		*.class ( completely ignores files ending with .class in the reposiotry )
		*.txt   ( comletely ignores files ending with .txt in the reposiotry )
		save & close the file 
	git add .
	git commit -m "new .gitignore"
	git status -- to see any chagnes - make sure it shows "working tree is clean" then 
	
	touch abc.class new.txt naresh.class
	mkdir logs/
	cd logs
	touch devops.java git.java helo.txt
    cd ..
    git status -- should still show you working tree is clean as we added all the above pattern in .gitignore file

		Note: .gitignore is a hidden file in linux ( means a dot (.) infront of any file name becomes hidden file in linux ) 
		hidden files can not be listed with normal ls -ltr command -- to see hidden files do "ls -al"

===================================================================================================================

Check Difference :

Scenerio1:  Track the changes between untracked file and the commit file.
$ git diff 

Scenerio2: Track the changes that have staged but not committed
git diff --cached
git diff --name-only --cached

Scenario3: Track the changes between two commits 
git diff <commit1-sha> <commit2-sha> 


Commit Amend :

git commit --amend -m "New CM7"   	# To change the commit msg.
git show <commit_id> 

Working on Branches :

The master branch is a default branch in Git. It is instantiated when first commit made on the project.

git branch  <branch name>  
git branch --list  
git branch -d <branch name>  
git checkout <branch name>  
git branch -m <old branch name><new branch name>  
git merge <branch name>
git switch

Merge
	Merge-Conflict
	Resolve Merge-Conflict
rebase

squash


===================================================================================================================	
	
scenario 11: Understanding merge & rebase ( merge & rebase both are used to combine the changes from one branch into another )

lets assume we have two branches master & feature with some commits we want to merge one into another

	assuming master has two commits c1 & c2, then we created a new branch feature, so here the feature is created with c1 & c2 and we call c2 as the base for feature branch now.

	master            c1   c2
	feature           c1   c2

	assume we started working on feature branch and create some commits f1 & f2 - mean while someone else also started working on master branch and created a commit c3. it will look like below now

	master            c1   c2  c3
	feature                c2  f1  f2
	
so what are the differnt ways to merge these two branches & what would be the results. lets try to understand

case1: merge changes with -- git merge

	git merge feature ( we should be in master branch while running this command ). once we issue this is how the git log history looks like at master 
	
	master            c1   c2  c3  f1  f2  mc
	feature           c1   c2  f1  f2
	
	so this would add / forward all commit id from feature branch into master along with a brand new commit id called merge commit (mc above)
	this mc does not have any significance in history making some ambiguity those who look at the commit history. 

case 2: merge changes using -- git rebase

		dev      c1  c2   c3
		feature 	    c2   f1   f2
	
		swith to feature branch and do "git rebase master", which would result as below 
		
		dev       c1  c2  c3 
		feature      c1  c2  c3  f1  f2  ( it changes feature branch base to match last commit id of master )
		
		switch back to master (git checkout master) & do "git rebase/merge feature" , which would result as below.
		
		dev       c1  c2  c3  f1  f2
		feature      c1  c2  c3  f1  f2 

		dev       c1  c2  c3  f1  f2
		feature      c1  c2  c3  f1  f2 


		
		making both branches with clean history of commits. 
		
case 3: merge changes with -- git merge --squash /// git merge feature (ff)

	git merge --squash feature ( we should be in master branch while running this command ). once we issue this is how the git log history looks like at master 

git merge feature (ff)
    master            c1   c2  c3  f1  f2 mc
	feature           c1   c2  f1  f2 

git rebase master
		master       c1  c2  c3  f1  f2
		feature      c1  c2  c3  f1  f2 
		
git merge --squash feature
git commit -m "combined all commits from feature"

    master            c1   c2  c3  mc
	feature           c1   c2  f1  f2 
		
	this case it will combine all the commit ids from feature branch & creates a brand new commit id at master with all changes combined from feature.
	

squash 
before merge ---> git rebase -i HEAD~4
or while merging ---> git merge --squash feature
		
		
git cherry-pick <commit id> # from target branch.


consider :::

feature1 ===> cm1,2,3,4,5,6,7
git log --oneline

on master branch :

git merge feature1 
git cherry-pick 7043a97
